from django.db import models

class Prediction(models.Model):
    # Defining fields to match dataset headers
    radius_mean = models.FloatField(default=0.0)
    texture_mean = models.FloatField(default=0.0)
    perimeter_mean = models.FloatField(default=0.0)
    area_mean = models.FloatField(default=0.0)
    smoothness_mean = models.FloatField(default=0.0)
    compactness_mean = models.FloatField(default=0.0)
    concavity_mean = models.FloatField(default=0.0)
    concave_points_mean = models.FloatField(default=0.0)
    symmetry_mean = models.FloatField(default=0.0)
    fractal_dimension_mean = models.FloatField(default=0.0)
    radius_se = models.FloatField(default=0.0)
    texture_se = models.FloatField(default=0.0)
    perimeter_se = models.FloatField(default=0.0)
    area_se = models.FloatField(default=0.0)
    smoothness_se = models.FloatField(default=0.0)
    compactness_se = models.FloatField(default=0.0)
    concavity_se = models.FloatField(default=0.0)
    concave_points_se = models.FloatField(default=0.0)
    symmetry_se = models.FloatField(default=0.0)
    fractal_dimension_se = models.FloatField(default=0.0)
    radius_worst = models.FloatField(default=0.0)
    texture_worst = models.FloatField(default=0.0)
    perimeter_worst = models.FloatField(default=0.0)
    area_worst = models.FloatField(default=0.0)
    smoothness_worst = models.FloatField(default=0.0)
    compactness_worst = models.FloatField(default=0.0)
    concavity_worst = models.FloatField(default=0.0)
    concave_points_worst = models.FloatField(default=0.0)
    symmetry_worst = models.FloatField(default=0.0)
    fractal_dimension_worst = models.FloatField(default=0.0)

    prediction_result = models.CharField(max_length=10)
    date = models.DateTimeField(auto_now_add=True)
